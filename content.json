{"meta":{"title":"码农","subtitle":"","description":"","author":"Dorry","url":"http://dorry.xyz","root":"/"},"pages":[],"posts":[{"title":"Apollo","slug":"Apollo","date":"2019-12-31T03:09:06.274Z","updated":"2019-12-31T03:08:33.239Z","comments":true,"path":"2019/12/31/Apollo/","link":"","permalink":"http://dorry.xyz/2019/12/31/Apollo/","excerpt":"","text":"服务器部署Apollo(单机，源码构建)一. 准备环境​ JDK 1.8 ​ MYSQL 5.7 ​ centOS 7.3 ​ git 2.24 二. Apollo源码获取进入将保存Apollo源码的文件，右击鼠标选择Git Bash Here后执行下面命令 1git clone https://github.com/ctripcorp/apollo.git 解压之后打开会看见很多子项目，其中我们会操作的目前有三个 ​ ① apollo-adminservice 配置管理，发布接口，服务于portal端图像化界面管理 ​ ② apollo-configservice 配置获取接口，配置推送接口，服务于Apollo客户端(应用) ​ ③ apollo-portal 配置管理界面，获取adminservice服务列表 三. 数据库初始化打开Apollo源码，进入scripts\\docker-quick-start\\sql文件，将文件的的sql文件导入到MySQL(外网能访问的)中 ​ apolloconfigdb.sql ，apolloportaldb.sql 导入之后会生成两个对应的数据库 四. 脚本修改选择源码文件根目录scripts文件中的 build.bat或build.sh（选择其中之一即可）修改 build.sh 1234567891011121314151617181920212223242526#!/bin/sh# apollo config db info# 在分布式部署中,config db有多个,每个环境都有单独的数据库，一个管理界面管理多个环境配置# 所以不同环境打包需要修改为对应的数据库信息apollo_config_db_url=jdbc:mysql://数据库服务器IP:端口/ApolloConfigDB?characterEncoding=utf8apollo_config_db_username=用户名apollo_config_db_password=密码# apollo portal db info# 管理项目数据库只修改一次就好apollo_portal_db_url=jdbc:mysql://数据库服务器IP:端口/ApolloPortalDB?characterEncoding=utf8apollo_portal_db_username=用户名apollo_portal_db_password=密码# 配置meta server url,也就是http://Apollo-configservice的IP:端口# 在对应环境上配置对应路径即可，这里只配置一个dev-meta# meta server url, different environments should have different meta server addresses#dev_meta=http://fill-in-dev-meta-server:8080#fat_meta=http://fill-in-fat-meta-server:8080#uat_meta=http://fill-in-uat-meta-server:8080#pro_meta=http://fill-in-pro-meta-server:8080dev_meta=http://服务器IP:端口# 这步不要忘记了#META_SERVERS_OPTS=\"-Ddev_meta=$dev_meta -Dfat_meta=$fat_meta -Duat_meta=$uat_meta -Dpro_meta=$pro_meta\"META_SERVERS_OPTS=\"-Ddev_meta=$dev_meta\" 注意：Apollo-adminservice 默认端口8090，Apollo-configservice默认端口8080，Apollo-portal默认8070 端口可修改，如果meta server url的端口不是8080，请记住端口，后面需要修改启动脚本文件 完成修改后执行修改后的脚本，进行打包 五. 部署进入源码根目录，获取上述三个项目的XXXXXX-github.zip包(项目的target目录下)上传服务器 在服务器上新建三个文件夹分别保存三个项目(mkdir 文件夹名)，解压项目 1unzip XXXXXX-github.zip 如果需要修改端口，进入scripts文件 vi startup.sh 将SERVER_PORT 修改为指定端口即可 三个项目操作类同 修改ApolloConfigDB数据库的ServerConfig表中eureka.service.url的value http://apollo-configserviceIP:port/eureka/ 多个用英文逗号隔开。 先后执行configservice，adminservice，portal解压后scripts中的startup.sh 有点耗时，启动成功访问管理界面，默认是http://IP:8090 ,账户：apollo，密码：admin Apollo差不多完成 六. 客户端连接创建spring boot项目 pom.xml 导入依赖 12345&lt;dependency&gt; &lt;groupId&gt;com.ctrip.framework.apollo&lt;/groupId&gt; &lt;artifactId&gt;apollo-client&lt;/artifactId&gt; &lt;version&gt;1.3.0&lt;/version&gt;&lt;/dependency&gt; 启动类添加注解 @EnableApolloConfig 配置文件 application.properties中 1234apollo.meta=http://configservice的IP:端口### apollo server的应用idapp.id=testAppapollo.bootstrap.enabled = true 搭建完成后启动客户端，系统会报连接超时什么的，无法获取配置 这是Apollo的安全机制，可以点击Apollo管理界面的 管理工具中的系统信息，其中的ip都是服务器的内外ip，外网无法正常访问 解决方法： ​ ①在idea的VM options参数添加 -Dapollo.configService=http://IP:端口 ​ ②修改adminservice，configservice的配置文件bootstrap.yml 1234eureka: instance: homePageUrl: http://$&#123;指定的IP&#125;:$&#123;指定的Port&#125; preferIpAddress: false 注意冒号后需要空格(没有空格服务启动不了) 更多 分布式部署指南","categories":[],"tags":[]},{"title":"docker安装Oracle","slug":"docker安装Oracle","date":"2019-12-12T08:45:46.099Z","updated":"2019-12-12T08:45:09.730Z","comments":true,"path":"2019/12/12/docker安装Oracle/","link":"","permalink":"http://dorry.xyz/2019/12/12/docker%E5%AE%89%E8%A3%85Oracle/","excerpt":"","text":"docker安装Oracledocker常用命令123456789docker images 查看镜像文件docker ps 查看正在运行的容器docker ps –a 查看所有的容器docker container exec -it f0b1c8ab3633 /bin/bash 进入到容器exit 退出docker version 查看版本docker run -d -p 81:80 nginx 启动nginx容器docker rmi imgageid 删除镜像docker rm 容器id 删除容器 1.获取镜像1$ docker pull registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g 查看镜像 ​ 2.创建容器1docker run -d -p 1521:1521 --name oracle registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g ​ 查看所有容器：docker ps -a ​ 查看运行时的容器：docker ps 3.运行容器1$ docker start oracle 4.进入容器1$ docker exec -it oracle bash 5.配置环境(防止 sqlplus: command not fund)​ 切换到root(密码:helowin) 1su root 6.编辑文件1vi /etc/profile 7.末尾添加123export ORACLE_HOME=/home/oracle/app/oracle/product/11.2.0/dbhome_2export ORACLE_SID=helowinexport PATH=$ORACLE_HOME/bin:$PATH 8.更新/etc/profile文件1source /etc/profile 9.创建软连接1ln -s $ORACLE_HOME/bin/sqlplus /usr/bin 10.切换到oracle 用户1su oracle 11.登录sqlplus并修改sys、system用户密码sqlplus /nolog​ conn /as sysdba 接着执行下面命令 alter user system identified by system; alter user sys identified by sys; 也可以创建用户 create user test identified by test; 并给用户赋予权限 grant connect,resource,dba to test;12.exit 是退出sql 软连接13.配置 tnsnames.ora1vi /home/oracle/app/oracle/product/11.2.0/dbhome_2/network/admin/tnsnames.ora 宿主ip地址 14.出现如下图片 15.这时我们需要去看一下oracle 的 lsnrctl 服务​ 查看状态： ​ 启动 1LSNRCTL&gt;start 完成！！","categories":[],"tags":[]},{"title":"mysql安装","slug":"mysql安装","date":"2019-12-08T15:32:10.057Z","updated":"2019-07-30T10:10:38.814Z","comments":true,"path":"2019/12/08/mysql安装/","link":"","permalink":"http://dorry.xyz/2019/12/08/mysql%E5%AE%89%E8%A3%85/","excerpt":"","text":"centOS 7.3(64位)新服务器 安装MySQL5.7 --yum方式 rpm -qa|grep -i mysql 用命令 yum -y remove ​ yum -y remove mysql-community-client-5.6.38-2.el7.x86_64 ​ 卸载不掉的用 rpm -ev ​ 依次卸载 直到没有 操作rpm文件 wget http://repo.mysql.com/mysql57-community-release-el7-8.noarch.rpm rpm -ivh mysql57-community-release-el7-8.noarch.rpm 安装MySQL服务 yum -y install mysql-server yum –installroot=/usr/local/mysql–releasever=/ -y install mysql-server（安装到指定目录） 配置 my.cnf vim /etc/my.cnf [mysqld] # # Remove leading # and set to the amount of RAM for the most important data # cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%. # innodb_buffer_pool_size = 128M # # Remove leading # to turn on a very important data integrity option: logging # changes to the binary log between backups. # log_bin # # Remove leading # to set options mainly useful for reporting servers. # The server defaults are faster for transactions and fast SELECTs. # Adjust sizes as needed, experiment to find the optimal values. # join_buffer_size = 128M # sort_buffer_size = 2M # read_rnd_buffer_size = 2M datadir=/var/lib/mysql socket=/var/lib/mysql/mysql.sock server_id = 1 expire_logs_days = 3 # Disabling symbolic-links is recommended to prevent assorted security risks symbolic-links=0 log-error=/var/log/mysqld.log pid-file=/var/run/mysqld/mysqld.pid 启动mysql服务 service mysqld start 重置密码 grep “password” /var/log/mysqld.log 查看临时密码 或者grep ‘temporary password’ /var/log/mysqld.log 需要重置密码要不什么也不能操作 alter user ‘root’@’localhost’ identified by ‘IPyun20190729!+@=#’; 第一个参数：IP地址 第二个参数：密码 grant all on . to ‘root’@’%’ identified by ‘IPyun20190729!+@=#’ with grant option; 第一个参数：数据库用户名（比如：root） 第二个参数：数据库密码 2、开放3306端口号 firewalld 防火墙（centos-7）运行命令,并重启： firewall-cmd –zone=public –add-port=3306/tcp –permanent firewall-cmd –reload","categories":[],"tags":[]}]}